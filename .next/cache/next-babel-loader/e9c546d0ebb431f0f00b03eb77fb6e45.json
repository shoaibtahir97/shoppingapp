{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INITIAL_STATE } from \"./state\";\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nvar basketSlice = createSlice({\n  name: \"basket\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    add: function add(state, action) {\n      return state.map(function (item) {\n        if (item.id !== action.payload.id) {\n          return item;\n        }\n\n        return _objectSpread({}, item, {\n          added: true\n        });\n      });\n    },\n    remove: function remove(state, action) {\n      return state.map(function (item) {\n        if (item.id !== action.payload.id) {\n          return item;\n        }\n\n        return _objectSpread({}, item, {\n          added: false\n        });\n      });\n    }\n  }\n});\nvar store = configureStore({\n  reducer: basketSlice.reducer\n});\nvar _basketSlice$actions = basketSlice.actions,\n    add = _basketSlice$actions.add,\n    remove = _basketSlice$actions.remove;\nexport { add, remove };\nexport { basketSlice, store };","map":null,"metadata":{},"sourceType":"module"}